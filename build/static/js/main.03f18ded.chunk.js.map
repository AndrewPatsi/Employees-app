{"version":3,"sources":["context.js","Employees/EmployeeItem.js","Employees/EmployeeList.js","Employees/AddEmployee.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","EmployeeItem","_ref","eitem","onChange","index","removeEmployee","useContext","classes","marked","push","react_default","a","createElement","className","join","type","checked","id","first_name","last_name","onClick","bind","EmployeeList","props","name","action","method","onSubmit","e","preventDefault","eitems","map","Employees_EmployeeItem","key","onToggle","disabled","AddEmployee","onCreate","data","form","target","isCheckboxOrRadio","includes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","field","value","err","return","firstname","trim","lastname","placeholder","required","Loader","App","_React$useState","useState","_React$useState2","Object","slicedToArray","setEmployee","_React$useState3","_React$useState4","loading","setLoading","useEffect","fetch","then","response","json","react_router_dom","to","react_router","path","context","Provider","filter","Suspense","fallback","src_Loader","Employees_AddEmployee","concat","Date","now","email","avatar","length","Employees_EmployeeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03f18ded.chunk.js","sourcesContent":["import React from 'react'\n\nconst Context = React.createContext()\n\nexport default Context\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport Context from '../context'\n\nfunction EmployeeItem({ eitem, index, onChange }) {\n  const { removeEmployee } = useContext(Context)\n  const classes = []\n\n  if (eitem.marked) {\n    classes.push('marked')\n  }\n\n  return (\n    <li className=\"list-item\">\n      <span className={classes.join(' ')}>\n        <input className=\"list-checkbox\" type='checkbox' checked={eitem.marked} onChange={() => onChange(eitem.id)}/>\n        <strong>{eitem.first_name}&nbsp;{eitem.last_name}</strong>\n      </span>\n\n      <button className='remove' onClick={removeEmployee.bind(null, eitem.id)}>\n        &times;\n      </button>\n    </li>\n  )\n}\n\nEmployeeItem.propTypes = {\n  eitem: PropTypes.object.isRequired,\n  index: PropTypes.number,\n  onChange: PropTypes.func.isRequired\n}\n\nexport default EmployeeItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport EmployeeItem from './EmployeeItem'\n\nfunction EmployeeList(props) {\n\n  function submitHandler(e) {\n    e.preventDefault();\n  }\n\n  return (\n    <form className=\"employees-list-form\" name=\"employeesListForm\" action=\"\" method=\"post\" onSubmit={ submitHandler }>\n      <fieldset className=\"employees-list-form--fieldset\">\n        <legend className=\"employees-list-form--legend\">\n          Employees list\n        </legend>\n        <ul className=\"list\">\n          {props.eitems.map((eitem, index) => {\n            return (\n              <EmployeeItem eitem={eitem} key={eitem.id} index={index} onChange={props.onToggle}/>\n            )\n          })}\n        </ul>\n      </fieldset>\n      <fieldset className=\"employees-list-form-bottom--fieldset\">\n        <button className=\"employee-list-form--button\" type='submit' disabled>Remove marked</button>\n      </fieldset>\n    </form>\n  )\n}\n\nEmployeeList.propTypes = {\n  eitems: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired\n}\n\nexport default EmployeeList\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction AddEmployee({ onCreate }) {\n\n  function submitHandler(e) {\n    e.preventDefault()\n    const data = {}\n    const form = e.target\n    const isCheckboxOrRadio = type => ['checkbox', 'radio'].includes(type)\n\n    for (let field of form) {\n      const {name} = field\n\n      if (name) {\n        const {type, checked, value} = field\n        if (isCheckboxOrRadio(type) && !checked) {\n          continue\n        }\n        data[name] = value\n      }\n    }\n\n    if(data.firstname.trim() && data.lastname.trim()) {\n      onCreate(data.firstname, data.lastname)\n    }\n  }\n\n  return (\n    <form className=\"employee-form\" onSubmit={ submitHandler }>\n      <input className=\"employee-form--input\" name=\"firstname\" type=\"text\" placeholder=\"Name\" required/>\n      <input className=\"employee-form--input\" name=\"lastname\" type=\"text\" placeholder=\"Lastname\" required/>\n      <button className=\"employee-form--button\" type='submit'>Add Employee</button>\n    </form>\n  )\n}\n\nAddEmployee.propTypes = {\n  onCreate: PropTypes.func.isRequired\n}\n\nexport default AddEmployee\n","import React from 'react'\n\n    function Loader () {  \n\n      return (\n        <div className=\"loader-c\">\n          <div className=\"loader\" />\n        </div>\n      )\n  }\nexport default Loader","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport EmployeeList from './Employees/EmployeeList'\nimport Context from './context'\nimport AddEmployee from './Employees/AddEmployee'\nimport Loader from './Loader'\n\nfunction App() {\n  const [eitems, setEmployee] = React.useState([])\n  const [loading, setLoading] = React.useState(true)\n\n  useEffect(() => {\n    fetch('https://reqres.in/api/users?per_page=12')\n      .then(response => response.json())\n      .then(eitems => {\n        setEmployee(eitems.data)\n        setLoading(false)\n      })\n  }, [])\n\n  function toggleEmployee(id) {\n    setEmployee(\n      eitems.map(eitem => {\n        if (eitem.id === id) {\n          eitem.marked = !eitem.marked\n        }\n        return eitem\n      })\n    )\n  }\n\n  function removeEmployee(id) {\n    setEmployee(eitems.filter(eitem => eitem.id !== id))\n  }\n\n  function addEmployee(first_name, last_name) {\n\n    setEmployee(\n      eitems.concat([\n        {\n          id: Date.now(),\n          email: \"\",\n          first_name,\n          last_name,\n          avatar: \"\",\n          marked: false\n        }\n      ])\n    )\n  }\n\n  return (\n    <Router>\n      <div className=\"wrapper\">\n        <nav className=\"top-nav\">\n          <ul className=\"top-nav-list\">\n            <li className=\"top-nav-item\">\n              <Link className=\"top-nav-link\" to=\"/\">Home</Link>\n            </li>\n            <li className=\"top-nav-item\">\n              <Link className=\"top-nav-link\" to=\"/employees\">Employees</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/employees\">\n            <Context.Provider value={{ removeEmployee }}>\n              <div className=\"wrapper\">\n                <h1>Employees page</h1>\n\n                <React.Suspense fallback={<Loader />}>\n                  <AddEmployee onCreate={addEmployee} />\n                </React.Suspense>\n\n                {loading && <Loader />}\n                {eitems.length ? (\n                  <EmployeeList eitems={eitems} onToggle={toggleEmployee} />\n                ) : loading ? null : (\n                  <p>No employees!</p>\n                )}\n              </div>\n            </Context.Provider>\n          </Route>\n          <Route path=\"/\">\n            <div className=\"wrapper\">\n              <h1>\n                Main page\n              </h1>\n              <p>Something important will happen here...</p>\n            </div>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}